---
root: true

env:
  jest: true

extends:
  - eslint:recommended
  - plugin:@typescript-eslint/recommended
  - plugin:@typescript-eslint/recommended-requiring-type-checking
  - plugin:import/errors
  - plugin:import/warnings
  - plugin:import/typescript

ignorePatterns:
  - node_modules/
  - dist/

parser: '@typescript-eslint/parser'

plugins:
  - import
  - '@typescript-eslint'
  - unused-imports

settings:
  # https://www.npmjs.com/package/eslint-import-resolver-typescript
  import/resolver:
    typescript:
      alwaysTryTypes: true
rules:
  '@typescript-eslint/adjacent-overload-signatures': error
  '@typescript-eslint/array-type':
    - error
    - default: array
  '@typescript-eslint/await-thenable': error
  '@typescript-eslint/consistent-type-assertions':
    - error
    - assertionStyle: as
      objectLiteralTypeAssertions: allow
  '@typescript-eslint/consistent-type-definitions':
    - error
    - interface
  '@typescript-eslint/explicit-module-boundary-types':
    - off # see explicit-function-return-type
  '@typescript-eslint/member-delimiter-style':
    - error
    - multiline:
        delimiter: semi
        requireLast: true
      singleline:
        delimiter: semi
        requireLast: false
  '@typescript-eslint/member-ordering': off
  '@typescript-eslint/no-explicit-any': off
  '@typescript-eslint/no-floating-promises': error
  '@typescript-eslint/no-inferrable-types':
    - error
    - ignoreParameters: true
      ignoreProperties: true
  '@typescript-eslint/no-misused-new': error
  '@typescript-eslint/no-namespace': error
  '@typescript-eslint/no-non-null-assertion': off
  '@typescript-eslint/no-parameter-properties': off
  '@typescript-eslint/no-require-imports': error
  '@typescript-eslint/no-unnecessary-boolean-literal-compare': error
  '@typescript-eslint/no-unnecessary-qualifier': error
  '@typescript-eslint/no-unused-expressions': error
  '@typescript-eslint/no-unused-vars':
    - error
    - ignoreRestSiblings: true
      argsIgnorePattern: '^_'
      caughtErrors: all
      caughtErrorsIgnorePattern: '^_'
  '@typescript-eslint/no-var-requires': error
  '@typescript-eslint/prefer-for-of': error
  '@typescript-eslint/prefer-function-type': off
  '@typescript-eslint/prefer-namespace-keyword': error
  '@typescript-eslint/promise-function-async': error
  '@typescript-eslint/restrict-template-expressions': off
  '@typescript-eslint/require-await': error
  '@typescript-eslint/triple-slash-reference': error
  '@typescript-eslint/type-annotation-spacing': error
  # nope nope nope -- these give waaaay too many errors on trivial AND INTENDED usages of `any`
  # that I won't enable them until they have some configurability
  '@typescript-eslint/no-unsafe-member-access': off
  '@typescript-eslint/no-unsafe-assignment': off
  complexity: off
  constructor-super: error
  curly:
    - error
    - multi-line
  eol-last: error
  eqeqeq:
    - error
    - always
    - 'null': ignore
  guard-for-in: error
  id-blacklist: off
  id-match: error
  import/default: off # conflicts with allowSyntheticDefaultImports in tsconfig
  import/order: off # sorting done by simple-import-sort
  linebreak-style:
    - error
    - unix
  max-classes-per-file: off
  new-parens: error
  no-bitwise: error
  no-caller: error
  no-cond-assign: error
  no-console: off
  no-debugger: error
  no-eval: error
  no-extra-boolean-cast: error
  no-extra-semi: error
  no-fallthrough: error
  no-irregular-whitespace: error
  no-multiple-empty-lines:
    - error
    - max: 2
  no-new-wrappers: error
  no-throw-literal: error
  no-trailing-spaces: error
  no-undef-init: error
  no-underscore-dangle: off
  no-unsafe-finally: error
  no-unused-labels: error
  no-var: error
  object-shorthand: error
  one-var:
    - error
    - never
  prefer-const: error
  quote-props:
    - error
    - as-needed
  radix: off # no-parseint turned on
  space-before-function-paren: off # overridden by ts-eslint
  space-in-parens:
    - error
    - never
  spaced-comment:
    - error
    - always
    - block:
        balanced: true
  unused-imports/no-unused-imports-ts: error # added solely for the autofixer that removes unused imports
  use-isnan: error
  valid-typeof: error
